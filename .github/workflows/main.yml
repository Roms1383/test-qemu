name: 'Test QEmu'


env:
  QEMU_BIN: ./qemu-git/build/qemu-system-xtensa
  ESPTOOL: ./esptool/esptool.py
  BOOT_APP0_URL: https://github.com/espressif/arduino-esp32/raw/master/tools/partitions/boot_app0.bin
  ARDUINO_PLATFORM_URL: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json
  ARDUINO_ESP32_VERSION: 2.0.7
  BUILD_ARTIFACT_FOLDER: ./build
  SKETCH_FOLDER: examples/test
  SKETCH_NAME: test.ino
  DEFAULT_DEVICE: esp32
  DEFAULT_BASE_URL: https://github.com/Roms1383/test-qemu/raw/main/.github/workflows/Test_tar_gz_tgz
  DEFAULT_BOOTLOADER_ADDR: "0x1000"
  DEFAULT_PARTITIONS_ADDR: "0x8000"
  DEFAULT_BOOT_APP0_ADDR: "0xe000"
  DEFAULT_FIRMWARE_ADDR: "0x10000"
  DEFAULT_SPIFFS_ADDR: "0x290000"
  DEFAULT_FLASH_SIZE: 4
  QEMU_TIMEOUT: 60 # seconds

on: 
  push:
  workflow_dispatch:
    inputs:
      DEVICE:
        type: choice
        description: Device
        default: esp32
        options:
        - esp32
        - esp32s2
        - esp32s3
        - esp32c3
      FLASH_SIZE:
        type: choice
        description: "Flash Size (MB)"
        default: "4"
        options:
        - "2"
        - "4"
        - "8"
        - "16"
      BASE_URL: 
        description: "URL Prefix for binaries"
        default: ""
      BOOT_APP0_URL:
        description: "boot_app0 URL"
        default: ""
      BOOTLOADER_ADDR:
        description: "Bootloader Address"
        default: "0x1000"
      PARTITIONS_ADDR:
        description: "Partitions Address"
        default: "0x8000"
      BOOT_APP0_ADDR:
        description: "Boot App0 Address"
        default: "0xe000"
      FIRMWARE_ADDR:
        description: "OTA0 Address"
        default: "0x10000"
      SPIFFS_ADDR:
        description: "SPIFFS Address"
        default: "0x290000"
      QEMU_TIMEOUT:
        description: "QEmu timeout"
        default: "60"

jobs:

  buildsketch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Compile sketch
        if: github.event_name == 'workflow_dispatch'
        uses: ArminJo/arduino-test-compile@v3.2.0
        with:
          platform-url: ${{ env.ARDUINO_PLATFORM_URL }}
          arduino-board-fqbn: esp32:esp32:${{ env.DEFAULT_DEVICE }}:FlashMode=dio,FlashFreq=80,FlashSize=${{ github.event.inputs.FLASH_SIZE }}M
          arduino-platform: esp32:esp32@${{ env.ARDUINO_ESP32_VERSION }}
          #required-libraries: ${{ matrix.required-libraries }}
          extra-arduino-lib-install-args: --no-deps
          extra-arduino-cli-args: "--warnings default " # see https://github.com/ArminJo/arduino-test-compile/issues/28
          sketch-names: ${{ env.SKETCH_NAME }}
          set-build-path: true
          #build-properties: ${{ toJson(matrix.build-properties) }}
          #debug-install: true
      - name: Copy compiled binaries
        if: github.event_name == 'workflow_dispatch'
        run: |
          cp -R ${{ env.SKETCH_FOLDER }}/build ${{ env.BUILD_ARTIFACT_FOLDER }}
          wget -q ${{ env.BOOT_APP0_URL }}  -O ${{ env.BUILD_ARTIFACT_FOLDER }}/boot_app0.bin
          ls ${{ env.BUILD_ARTIFACT_FOLDER }}/*.bin -la
          # normalize file names
          mv ${{ env.BUILD_ARTIFACT_FOLDER }}/${{ env.SKETCH_NAME }}.bin ${{ env.BUILD_ARTIFACT_FOLDER }}/firmware.bin
          mv ${{ env.BUILD_ARTIFACT_FOLDER }}/${{ env.SKETCH_NAME }}.bootloader.bin ${{ env.BUILD_ARTIFACT_FOLDER }}/bootloader.bin
          mv ${{ env.BUILD_ARTIFACT_FOLDER }}/${{ env.SKETCH_NAME }}.partitions.bin ${{ env.BUILD_ARTIFACT_FOLDER }}/partitions.bin
          if [[ -f "${{ env.BUILD_ARTIFACT_FOLDER }}/${{ env.SKETCH_NAME }}.spiffs.bin" ]]; then
            mv ${{ env.BUILD_ARTIFACT_FOLDER }}/${{ env.SKETCH_NAME }}.spiffs.bin ${{ env.BUILD_ARTIFACT_FOLDER }}/spiffs.bin
          else
            echo "[INFO] Creating empty SPIFFS file"
            touch ${{ env.BUILD_ARTIFACT_FOLDER }}/spiffs.bin
          fi
          
          
          
      - name: Upload binaries as artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v3
        with:
          name: Build-dir
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}

  qemu:
  
    runs-on: ubuntu-latest
    needs: buildsketch
    steps:

      - name: Guess Context
        run: |
          if [[ ${{ github.event_name == 'workflow_dispatch' }} == true ]]; then
            BASE_URL=${{ github.event.inputs.BASE_URL }}
            BOOTLOADER_ADDR=${{ github.event.inputs.BOOTLOADER_ADDR }}
            PARTITIONS_ADDR=${{ github.event.inputs.PARTITIONS_ADDR }}
            BOOT_APP0_ADDR=${{ github.event.inputs.BOOT_APP0_ADDR }}
            FIRMWARE_ADDR=${{ github.event.inputs.FIRMWARE_ADDR }}
            SPIFFS_ADDR=${{ github.event.inputs.SPIFFS_ADDR }}
            DEVICE=${{ github.event.inputs.DEVICE }}
            FLASH_SIZE=${{ github.event.inputs.FLASH_SIZE }}
          else
            BASE_URL=${{ env.DEFAULT_BASE_URL }}
            FIRMWARE_URL=$BASE_URL.ino.bin
            PARTITION_URL=$BASE_URL.ino.partitions.bin
            BOOTLOADER_URL=$BASE_URL.ino.bootloader.bin
            SPIFFS_URL=$BASE_URL.spiffs.bin
            BOOTLOADER_ADDR=${{ env.DEFAULT_BOOTLOADER_ADDR }}
            PARTITIONS_ADDR=${{ env.DEFAULT_PARTITIONS_ADDR }}
            BOOT_APP0_ADDR=${{ env.DEFAULT_BOOT_APP0_ADDR }}
            FIRMWARE_ADDR=${{ env.DEFAULT_FIRMWARE_ADDR }}
            SPIFFS_ADDR=${{ env.DEFAULT_SPIFFS_ADDR }}
            FLASH_SIZE=${{ env.DEFAULT_FLASH_SIZE }}
            DEVICE=${{ env.DEFAULT_DEVICE }}
          fi
                          
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "DEVICE=$DEVICE" >> $GITHUB_ENV
          echo "BOOTLOADER_ADDR=$BOOTLOADER_ADDR" >> $GITHUB_ENV
          echo "PARTITIONS_ADDR=$PARTITIONS_ADDR" >> $GITHUB_ENV
          echo "BOOT_APP0_ADDR=$BOOT_APP0_ADDR" >> $GITHUB_ENV
          echo "FIRMWARE_ADDR=$FIRMWARE_ADDR" >> $GITHUB_ENV
          echo "SPIFFS_ADDR=$SPIFFS_ADDR" >> $GITHUB_ENV
          echo "FIRMWARE_URL=$FIRMWARE_URL" >> $GITHUB_ENV
          echo "PARTITION_URL=$PARTITION_URL" >> $GITHUB_ENV
          echo "BOOTLOADER_URL=$BOOTLOADER_URL" >> $GITHUB_ENV
          echo "SPIFFS_URL=$SPIFFS_URL" >> $GITHUB_ENV
          echo "FLASH_SIZE=$FLASH_SIZE" >> $GITHUB_ENV

      - name: üì• Download binaries (url)
        if: github.event_name != 'workflow_dispatch'
        run: |
          wget -q ${{ env.FIRMWARE_URL }}   -O firmware.bin
          wget -q ${{ env.BOOTLOADER_URL }} -O bootloader.bin
          wget -q ${{ env.PARTITION_URL }}  -O partitions.bin
          wget -q ${{ env.BOOT_APP0_URL }}  -O boot_app0.bin
          wget -q ${{ env.SPIFFS_URL }}     -O spiffs.bin
          
      - name: üìÅ Retrieve binaries (artifact)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/download-artifact@v3
        with:
          name: Build-dir
          path: ${{ env.BUILD_ARTIFACT_FOLDER }}

      - name: üõÖ Cache QEmu build
        uses: actions/cache@v3
        id: cache-qemu
        with:
          path: './qemu-git'
          key: ${{ runner.os }}-qemu-${{ hashFiles('**/qemu-system-xtensa') }}
          restore-keys: |
            ${{ runner.os }}-qemu-
          
      - name: üì• Checkout qemu-xtensa with flash size fix
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: listout/qemu
          path: './qemu-git'
          ref: 'fix-flash-size'
          
      - name: ‚öíÔ∏è Build QEmu
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
          cd qemu-git
          ./configure --target-list=xtensa-softmmu \
              --enable-gcrypt \
              --enable-debug --enable-sanitizers \
              --disable-strip --disable-user \
              --disable-capstone --disable-vnc \
              --disable-sdl --disable-gtk
          ninja -C build

      - name: ü™° Setup Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: üõÖ Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: ü™° Setup pyserial
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pyserial
          if [[ ${{ github.event_name == 'workflow_dispatch' }} == true ]]; then
            cp ./build/*.bin ./
          fi
                      
      - name: üì• Checkout esptool.py
        uses: actions/checkout@v3
        with:
          repository: espressif/esptool
          path: './esptool'
   
      - name: üè≠ Create firmware for QEmu
        run: |
          ${{ env.ESPTOOL }} --chip ${{ env.DEVICE }} merge_bin --fill-flash-size ${{ env.FLASH_SIZE }}MB -o flash_image.bin \
            ${{ env.BOOTLOADER_ADDR }} bootloader.bin \
            ${{ env.PARTITIONS_ADDR }} partitions.bin \
            ${{ env.BOOT_APP0_ADDR }}  boot_app0.bin \
            ${{ env.FIRMWARE_ADDR }}   firmware.bin \
            ${{ env.SPIFFS_ADDR }}     spiffs.bin
            
      - name: üïπÔ∏è Load firmware in QEmu
        # qemu-system-xtensa -nographic -no-reboot -machine esp32 -drive file=firmware.bin,if=mtd,format=raw
        run: |
          (${{ env.QEMU_BIN }} -nographic -machine esp32 -drive file=flash_image.bin,if=mtd,format=raw | tee -a ./logs.txt) &
          sleep ${{ env.QEMU_TIMEOUT }}
          killall qemu-system-xtensa || true
          
      - name: Upload logs as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Qemu Logs
          path: |
            ./logs.txt
